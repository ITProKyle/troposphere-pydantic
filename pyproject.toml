[tool.poetry]
name = "troposphere-pydantic"
version = "0.0.0"
description = "A POC project for using pydantic in the troposphere library."
authors = [
  "Kyle Finley <kyle@finley.sh>",
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/ITProKyle/troposphere-pydantic"
repository = "https://github.com/ITProKyle/troposphere-pydantic"
packages = [
  { include = "troposphere" },
]

[tool.poetry.dependencies]
python = "^3.9"

cfn-flip = "^1.3.0"
pydantic = { git = "https://github.com/samuelcolvin/pydantic.git", branch = "master" }  # needed until 1.9 release

[tool.poetry.dev-dependencies]
black = "^21.12b0"
coverage = "^6.2"
flake8 = "^4.0.1"
flake8-bugbear = "^21.11.29"
flake8-comprehensions = "^3.7.0"
flake8-docstrings = "^1.6.0"
flake8-print = "^4.0.0"
flake8-use-fstring = "^1.3"
isort = "^5.10.1"
pep8-naming = "^0.12.1"
pre-commit = "^2.16.0"
pydocstyle = "^6.1.1"
pylint = "^2.12.2"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/ITProKyle/troposphere-pydantic/issues"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.demo
  | \.hg
  | \.mypy_cache
  | \.runway
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ["py37", "py38", "py39"]


[tool.isort]
profile = "black"
known_local_folder = []
skip = [
  ".demo",
  ".eggs",
  ".git",
  ".mypy_cache",
  ".venv",
  "_build",
  "build",
  "dist",
  "node_modules",
  "venv",
]


[tool.pylint.basic]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#basic-checker
attr-rgx = "([a-z_][a-z0-9_]{2,50}|VARIABLES)$"
attr-name-hint = "([a-z_][a-z0-9_]{2,50}|VARIABLES)$"
good-names = [
  "_",
  "a",
  "b",
  "ci",
  "db",
  "f",
  "fn",
  "fp",
  "gb",
  "i",
  "id",
  "j",
  "k",
  "kb",
  "mb",
  "ok",
  "os",
  "ui",
  "v",
]

[tool.pylint.classes]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#classes-checker
defining-attr-methods = [
  "__init__",
  "__new__",
  "setUp",
]
exclude-protected=[
  "_asdict",
  "_fields",
  "_replace",
  "_source",
  "_make",
  "_session",  # for boto3.session.Session
  "_prompter",
  "_client_config",  # boto3.client.Client._client_config contains info like region
  "_endpoint",  # boto3.client.Client._endpoint contains s3 endpoint info
  "_validate_props"  # called on troposphere resources
]

[tool.pylint.design]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#design-checker-options
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 20
max-locals = 25
max-parents = 10
max-public-methods = 30
max-returns = 10
max-statements = 50
min-public-methods = 0

[tool.pylint.format]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#format-checker
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#imports-checker
allow-wildcard-with-all = "no"

[tool.pylint.logging]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#logging-checker
logging-format-style = "old"  # TODO update to new

[tool.pylint.master]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#general-options
extension-pkg-whitelist = [
  "pydantic",  # https://github.com/samuelcolvin/pydantic/issues/992#issuecomment-553545180
]
ignore-patterns = [
  ".+py[ci]$",
]
jobs = 0

[tool.pylint.miscellaneous]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#miscellaneous-checker
notes = ["FIXME"]

[tool.pylint.message_control]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#messages-control-options
disable = [
  "consider-using-f-string",  # TODO remove
  "line-too-long",  # flake8 overlap
  "missing-class-docstring",  # flake8 (pydocstyle) overlap
  "missing-function-docstring",  # flake8 (pydocstyle) overlap
  "missing-module-docstring",  # flake8 (pydocstyle) overlap
  "similarities",  # black overcomplicated this
  "ungrouped-imports", # false positive when using TYPE_CHECKING; isort should cover this
  "unspecified-encoding",  # TODO remove
]

[tool.pylint.typecheck]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#typecheck-checker
ignored-classes = []
ignored-modules = ["_typeshed", "distutils"]


[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/.demo",
  "**/.eggs",
  "**/.git",
  "**/.runway",
  "**/.venv",
  "**/docs",
  "**/node_modules",
  "**/typings",
  "test.py",
  "test*.py",
]
extraPaths = []
pythonPlatform = "All"
pythonVersion = "3.9"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportWildcardImportFromLibrary = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"
